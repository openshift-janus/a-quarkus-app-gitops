apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  labels:
    app.kubernetes.io/instance: '{{ .Values.app.name }}'
    app.kubernetes.io/name: '{{ .Values.app.name }}'
    operator.tekton.dev/operand-name: openshift-pipelines-addons
    pipeline.openshift.io/runtime: java
    pipeline.openshift.io/runtime-version: openjdk-17-ubi8
    pipeline.openshift.io/type: kubernetes
  name: '{{ .Values.app.name }}-pipeline'
spec:
  params:
  - default: '{{ .Values.app.name }}'
    name: APP_NAME
    type: string
  - name: source-repo
    description: source repo that contains the application code
    type: string
    default: '{{ .Values.git.repo }}'
  - name: source-branch
    description: source branch to build from
    default: '{{ .Values.git.branch }}'
    type: string
  - default: image-registry.openshift-image-registry.svc:5000/$(params.APP_NAME)-dev/$(params.APP_NAME)
    name: IMAGE_NAME
    type: string
  - default: .
    name: PATH_CONTEXT
    type: string
  - default: openjdk-17-ubi8
    name: VERSION
    type: string
  - default: workshop
    name: IMAGESTREAM
    type: string
  - default: latest
    name: IMAGESTREAMTAG
    type: string
  # I didn't install Quay , so I used internal registry instead
  - default: quay.io/janus_demo
    name: QUAY_URL
    type: string
  - default: '{{ .Values.devops.repo }}'
    name: DEVOPS_REPO
    type: string
  - default: '{{ .Values.devops.branch }}'
    name: DEVOPS_BRANCH
    type: string
  - default: '{{ .Values.devops.filepath }}'
    name: FILEPATH
    type: string
  - default: '{{ .Values.devops.release_tag }}'
    name: RELEASE_TAG
    type: string
  - name: SONARQUBE_HOST_URL
    type: string
    default: '{{ .Values.dep.sonarHostUrl}}'
  - name: SONARQUBE_PROJECT_KEY
    type: string
  - name: SONARQUBE_PROJECT_SECRET
    type: string
  - name: MAVEN_MIRROR_URL
    type: string
    default: '{{ .Values.dep.nexusHostUrl }}/repository/maven-public/'

  tasks:
  - name: fetch-source
    params:
    - name: url
      value: $(params.source-repo)
    - name: revision
      value: $(params.source-branch)
    - name: deleteExisting
      value: "true"
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
    - name: basic-auth
      workspace: gitcredential
  
  - name: scan-source
    params:
      - name: sonarqubeHostUrl
        value: $(params.SONARQUBE_HOST_URL)
      - name: sonarqubeProjectKey
        value: $(params.SONARQUBE_PROJECT_KEY)
      - name: sonarqubeProjectSecret
        value: $(params.SONARQUBE_PROJECT_SECRET)
    runAfter:
      - fetch-source
    taskRef:
      kind: Task
      name: scan-code
    workspaces:
      - name: repository
        workspace: workspace

  - name: verify-source
    runAfter:
    - fetch-source
    taskRef:
      kind: Task
      name: verify-source-code
    workspaces:
    - name: repository
      workspace: workspace
    # - name: secrets
    #   workspace: secrets

  - name: package
    params:
      - name: MAVEN_MIRROR_URL
        value: ${params.MAVEN_MIRROR_URL}
    runAfter:
      - scan-source
      - verify-source
    taskRef:
      kind: ClusterTask
      name: maven
    workspaces:
      - name: source
        workspace: workspace
      - name: maven-settings
        workspace: maven-settings
  
  - name: build
    params:
      - name: IMAGE
        value: "$(params.IMAGE_NAME)"
    runAfter:
      - package
    taskRef:
      kind: Task
      name: kaniko
    workspaces:
    - name: source
      workspace: workspace

  - name: publish-test
    params:
    - name: srcImageURL
      value: docker://$(params.IMAGE_NAME)@$(tasks.build.results.IMAGE_DIGEST)
    - name: destImageURL
      value: docker://$(params.QUAY_URL)/$(params.APP_NAME)-test:$(params.RELEASE_TAG)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    runAfter:
    - build
    taskRef:
      kind: ClusterTask
      name: skopeo-copy
    workspaces:
    - name: images-url
      workspace: workspace
  - name: publish-prod
    params:
    - name: srcImageURL
      value: docker://$(params.QUAY_URL)/$(params.APP_NAME)-test:$(params.RELEASE_TAG)
    - name: destImageURL
      value: docker://$(params.QUAY_URL)/$(params.APP_NAME)-prod:$(params.RELEASE_TAG)
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    runAfter:
    - publish-test
    taskRef:
      kind: ClusterTask
      name: skopeo-copy
    workspaces:
    - name: images-url
      workspace: workspace
  # - name: rox-image-check
  #   runAfter:
  #     - build
  #   taskRef:
  #     kind: ClusterTask
  #     name: rox-image-check
  #   params:
  #     - name: rox_central_endpoint
  #       value: roxsecrets
  #     - name: rox_api_token
  #       value: roxsecrets
  #     - name: image
  #       value: >-
  #         image-registry.openshift-image-registry.svc:5000/$(params.APP_NAME)-dev/$(params.APP_NAME)
  #     - name: image_digest
  #       value: '$(tasks.build.results.IMAGE_DIGEST)'

  - name: update-dev-gitops
    taskRef:
      name: yq-and-git-push
    workspaces:
      - name: output
        workspace: workspace
    params:
      - name: file-path
        value: $(params.FILEPATH)
      - name: image-tag
        value: $(tasks.build.results.IMAGE_DIGEST)
      - name: helm-chart-git-url
        value: $(params.DEVOPS_REPO)  
      - name: helm-chart-git-revision
        value: $(params.DEVOPS_BRANCH)
    runAfter:
    - build
  workspaces:
  - name: workspace
  - name: maven-settings
  - name: gitcredential
  - name: secrets
