apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  labels:
    app.kubernetes.io/instance: '{{.Values.build.git.repo_name}}'
    app.kubernetes.io/name: '{{.Values.build.git.repo_name}}'
    operator.tekton.dev/operand-name: openshift-pipelines-addons
    pipeline.openshift.io/runtime: java
    pipeline.openshift.io/runtime-version: openjdk-17-ubi8
    pipeline.openshift.io/type: kubernetes
  name: '{{.Values.build.git.repo_name}}-pipeline'
spec:
  params:
  # - default: '{{.Values.build.git.repo_name}}'
  #   name: APP_NAME
  #   type: string
  - name: source_repo_url
    description: source repo that contains the application code
    type: string
    default: '{{ .Values.build.git.repo_name }}'
  - name: source_git_revision
    description: source branch to build from
    type: string

  - name: maven_mirror_url
    type: string

  - name: sonarqube_host_url
    type: string
  - name: sonarqube_project_key
    type: string
  - name: sonarqube_project_secret
    type: string

  - name: tls_verify
    type: string
  # - name: BUILD_EXTRA_ARGS
  #   type: string
  # - name: GIT_REVISION
  #   type: string
  - name: git_ref
    type: string
  - name: commit_date
    type: string
  - name: commit_author
    type: string
  - name: commit_message
    type: string
  - name: image_repo
    type: string
  - name: image_tag
    type: string

  # - name: MANIFEST_FILE
  #   type: string
  # - name: MANIFEST_FILE_PROD
  #   type: string
  # - name: MANIFEST_REPO
  #   type: string
  # - name: MANIFEST_REPO_NAME
  #   type: string

  # - default: image-registry.openshift-image-registry.svc:5000/$(params.APP_NAME)-dev/$(params.APP_NAME)
  #   name: IMAGE_NAME
  #   type: string
  # - name: IMAGE_DIGEST
  #   type: string
  #   name: PATH_CONTEXT
  #   type: string
  # - default: openjdk-17-ubi8
  #   name: VERSION
  #   type: string
  # - default: workshop
  #   name: IMAGESTREAM
  #   type: string
  # - default: latest
  #   name: IMAGESTREAMTAG
  #   type: string
  # - default: quay.io/janus_demo
  #   name: QUAY_URL
  #   type: string
  # - default: '{{ .Values.devops.repo }}'
  #   name: DEVOPS_REPO
  #   type: string
  # - default: '{{ .Values.devops.branch }}'
  #   name: DEVOPS_BRANCH
  #   type: string
  # - default: '{{ .Values.devops.filepath }}'
  #   name: FILEPATH
  #   type: string
  # - default: '{{ .Values.devops.release_tag }}'
  #   name: RELEASE_TAG
  #   type: string

  tasks:
  - name: fetch-source
    params:
    - name: url
      value: $(params.source_repo_url)
    - name: revision
      value: $(params.source_git_revision)
    - name: deleteExisting
      value: "true"
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
    - name: basic-auth
      workspace: gitcredential
  
  - name: verify-source
    runAfter:
    - fetch-source
    taskRef:
      kind: Task
      name: verify-source-code
    workspaces:
    - name: repository
      workspace: workspace
    - name: secrets
      workspace: secrets

  - name: package
    params:
      - name: MAVEN_IMAGE
        value: '{{ .Values.build.maven.maven_builder_image }}'
      - name: MAVEN_MIRROR_URL
        value: $(params.maven_mirror_url)
      - name: GOAL
        value: "package"
    runAfter:
      - verify-source
    taskRef:
      kind: Task
      name: maven
    workspaces:
      - name: source
        workspace: workspace
      - name: maven-settings
        workspace: maven-settings
      - name: maven-local-repo
        workspace: maven-local-repo
  
  - name: scan-source
    params:
      - name: SONARQUBE_HOST_URL
        value: $(params.sonarqube_host_url)
      - name: sonarqube_project_key
        value: $(params.sonarqube_project_key)
      - name: sonarqubeProjectSecret
        value: $(params.sonarqube_project_secret)
    runAfter:
      - package
    taskRef:
      kind: Task
      name: scan-code
    workspaces:
      - name: repository
        workspace: workspace

  # - name: build
  #   params:
  #     - name: IMAGE
  #       value: "$(params.IMAGE_NAME)"
  #   runAfter:
  #     - scan-source
  #   taskRef:
  #     kind: Task
  #     name: kaniko
  #   workspaces:
  #   - name: source
  #     workspace: workspace
  - name: build
    retries: 1
    params:
    - name: tls_verify
      value: $(params.tls_verify)
    - name: BUILD_EXTRA_ARGS
      value: --label=io.openshift.build.commit.author='$(params.commit_author)' --label=io.openshift.build.commit.date='$(params.commit_date)'
        --label=io.openshift.build.commit.id='$(params.source_git_revision)' --label=io.openshift.build.commit.message='$(params.commit_message)'
        --label=io.openshift.build.commit.ref='$(params.git_ref)' --ulimit=nofile=4096:4096
    - name: IMAGE
      value: $(params.image_repo):$(params.image_tag)
    runAfter:
    - scan-source
    taskRef:
      kind: ClusterTask
      name: buildah
    workspaces:
    - name: source
      workspace: workspace

  # - name: publish-test
  #   params:
  #   - name: srcImageURL
  #     value: docker://$(params.IMAGE_NAME)@$(tasks.build.results.IMAGE_DIGEST)
  #   - name: destImageURL
  #     value: docker://$(params.QUAY_URL)/$(params.APP_NAME)-test:$(params.RELEASE_TAG)
  #   - name: srcTLSverify
  #     value: "false"
  #   - name: destTLSverify
  #     value: "false"
  #   runAfter:
  #   - build
  #   taskRef:
  #     kind: ClusterTask
  #     name: skopeo-copy
  #   workspaces:
  #   - name: images-url
  #     workspace: workspace
  # - name: publish-prod
  #   params:
  #   - name: srcImageURL
  #     value: docker://$(params.QUAY_URL)/$(params.APP_NAME)-test:$(params.RELEASE_TAG)
  #   - name: destImageURL
  #     value: docker://$(params.QUAY_URL)/$(params.APP_NAME)-prod:$(params.RELEASE_TAG)
  #   - name: srcTLSverify
  #     value: "false"
  #   - name: destTLSverify
  #     value: "false"
  #   runAfter:
  #   - publish-test
  #   taskRef:
  #     kind: ClusterTask
  #     name: skopeo-copy
  #   workspaces:
  #   - name: images-url
  #     workspace: workspace
  # - name: rox-image-check
  #   runAfter:
  #     - build
  #   taskRef:
  #     kind: ClusterTask
  #     name: rox-image-check
  #   params:
  #     - name: rox_central_endpoint
  #       value: roxsecrets
  #     - name: rox_api_token
  #       value: roxsecrets
  #     - name: image
  #       value: >-
  #         image-registry.openshift-image-registry.svc:5000/$(params.APP_NAME)-dev/$(params.APP_NAME)
  #     - name: image_digest
  #       value: '$(tasks.build.results.IMAGE_DIGEST)'

  # - name: update-dev-gitops
  #   taskRef:
  #     name: yq-and-git-push
  #   workspaces:
  #     - name: output
  #       workspace: workspace
  #   params:
  #     - name: file-path
  #       value: $(params.FILEPATH)
  #     - name: image-tag
  #       value: $(tasks.build.results.IMAGE_DIGEST)
  #     - name: helm-chart-git-url
  #       value: $(params.DEVOPS_REPO)  
  #     - name: helm-chart-source_git_revision
  #       value: $(params.DEVOPS_BRANCH)
  #   runAfter:
  #   - build
  workspaces:
  - name: workspace
  - name: maven-settings
  - name: maven-local-repo
  - name: gitcredential
  - name: secrets
