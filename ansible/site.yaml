---
- name: Gather Cluster Info.
  gather_facts: false
  hosts: 'localhost'
  tasks:
  - name: Determine Host
    shell: "oc cluster-info | grep -Eo '.cluster(.*?).com'"
    register: cluster_response
  - name: Extract Cluster
    set_fact:
      cluster_host: "{{ cluster_response.stdout }}"

- name: Fetch installed components info
  hosts: localhost
  tasks:
  - name: Fetch Sonarqube OpenShift Route
    k8s_info:
      api_version: route.openshift.io/v1
      kind: Route
      namespace: "{{env.sonarnamespace}}"
      label_selectors: 
        - app = sonarqube
    register: sonarqube_route_info
    ignore_errors: true
    tags:
      - fetch_info

  - name: Fail if route doesn't exist
    fail:
      msg: "Failed to fetch OpenShift Route URL for SonarQube. Ensure the route with label 'app: sonarqube' exists in the 'sonarqube' namespace."
    when: not sonarqube_route_info.resources
  - name: Extract sonarqube Route URL
    set_fact:
      sonarqube_route_url: "{{ sonarqube_route_info.resources[0].status.ingress[0].host }}"
    when: sonarqube_route_info.resources
    tags:
      - fetch_info

  - name: Fetch quay Route
    k8s_info:
      api_version: route.openshift.io/v1
      kind: Route
      name: quay-quay
      namespace: "{{ env.quaynamespace}}"
    register: route_info
    tags:
      - fetch_info

    # - name: debug
    #   debug:
    #     msg: {{route_info}}

  - name: Extract quay Route URL
    set_fact:
      quay_route_url: "{{ route_info.resources[0].status.ingress[0].host }}"
    when: route_info.resources
    tags:
      - fetch_info

  - name: Fetch cyclonedx Route
    k8s_info:
      api_version: route.openshift.io/v1
      kind: Route
      name: cyclonedx-bom-repo-server
      namespace: "{{ env.cyclonedxnamespace}}"
    register: cyclonedx_info
    tags:
      - fetch_info

  - name: Extract cyclonedx Route URL
    set_fact:
      cyclonedx_route_url: "{{ cyclonedx_info.resources[0].status.ingress[0].host }}"
    when: cyclonedx_info.resources
    tags:
      - fetch_info

  - name: Fetch rhacs Route
    k8s_info:
      api_version: route.openshift.io/v1
      kind: Route
      name: central
      namespace: "{{ env.rhacsnamespace}}"
    register: rhacs_route_info
    tags:
      - fetch_info

  - name: Extract rhacs Route URL
    set_fact:
      rhacs_route_url: "{{ rhacs_route_info.resources[0].status.ingress[0].host }}"
    when: rhacs_route_info.resources
    tags:
      - fetch_info

  - name: Fetch Nexus Svc
    k8s_info:
      api_version: v1
      kind: Service
      name: nexus-sonatype-nexus-service
      namespace: "{{ env.nexusnamespace}}"
    register: nexus_svc_info
    tags:
      - fetch_info

  - name: debug
    debug:
      var: nexus_svc_info
    tags:
      - fetch_info

  - name: Extract nexus svc URL
    set_fact:
      nexus_svc_url: "{{ nexus_svc_info.resources[0].metadata.name }}.{{env.nexusnamespace}}.svc"
      nexus_svc_port: "{{ nexus_svc_info.resources[0].spec.ports[0].port }}"
    when: nexus_svc_info.resources
    tags:
      - fetch_info

  # Add private repo to argocd
  - name: Fetch ArgoCD admin password from Kubernetes Secret
    k8s_info:
      api_version: v1
      kind: Secret
      name: argocd-cluster
      namespace: "{{env.gitopsnamespace}}"
    register: secret_info
    tags:
      - add_private_repo
  # - name: debug
  #   debug:
  #     msg: {{secret_info}}
  - name: Set ArgoCD admin password
    set_fact:
      argocd_password: "{{ secret_info.resources[0].data['admin.password'] | b64decode }}"
    when: secret_info.resources | length > 0
    tags:
      - add_private_repo

  - name: Fail if ArgoCD admin password retrieval fails
    fail:
      msg: "Failed to retrieve ArgoCD admin password from Kubernetes Secret."
    when: secret_info.resources | length == 0
    tags:
      - add_private_repo

  - name: Fetch argocd Route
    # with_items: "{{ env }}"
    k8s_info:
      api_version: route.openshift.io/v1
      kind: Route
      name: argocd-server
      namespace: "{{env.gitopsnamespace}}"
      # label_selectors: 
      #   - app.kubernetes.io/name = argocd-server
    register: route_info
    tags:
      - add_private_repo
    # ignore_errors: yes

  - name: Extract argocd Route URL
    set_fact:
      argocd_route_url: "{{ route_info.resources[0].status.ingress[0].host }}"
    when: route_info.resources
    tags:
      - add_private_repo

- name: Install a-quarkus-app CI pipeline via helm
  hosts: 'localhost'
  gather_facts: false
  tasks:
  - name: Wait for ArgoCD to be Ready
    kubernetes.core.k8s_info:
      api_version: argoproj.io/v1alpha1
      kind: ApplicationSet
    register: cm_crd
    until: cm_crd.api_found == true
    retries: 40
    delay: 5

  - name: Log in to ArgoCD and add private GitHub repo
    # with_items: "{{ env }}"
    shell: |
      argocd login {{ argocd_route_url }} --username=admin --password={{ argocd_password }} --insecure --grpc-web
      argocd repo add https://github.com/{{ env.githubrganization }}/{{env.appname}}-gitops.git --username {{ lookup('env', 'SCM_USERNAME') }} --password {{ lookup('env', 'SCM_PAT') }}
    tags:
      - add_private_repo

  - name: Apply ApplicationSet for a-quarkus-app pipeline Deployment
    # with_items: "{{ env }}"
    kubernetes.core.helm:
      state: present
      name: applicationset
      namespace: "{{ env.gitopsnamespace }}"
      chart_ref: ../helm/applicationset
      values:
          applicationset:
            namespace: "{{env.gitopsnamespace}}"
          helm_params:
            argocd:
              namespace: "{{env.gitopsnamespace}}"
            build:
              cluster_subdomain: "{{ cluster_host[1:] }}"
              maven:
                maven_builder_image: "{{env.maven_builder_image}}"

            dev:
              destination:
                server: "https://kubernetes.default.svc"
                namespace: "{{env.appname}}-dev"
              image:
                repository: "{{ quay_route_url }}/dev/{{env.appname}}"
            test:
              destination:
                server: "https://kubernetes.default.svc"
                namespace: "{{env.appname}}-test"
                repository: "{{ quay_route_url }}/test/{{env.appname}}"
            prod:
              destination:
                server: "https://kubernetes.default.svc"
                namespace: "{{env.appname}}-prod"
                repository: "{{ quay_route_url }}/prod/{{env.appname}}"
              image:
                repository: ""

- name: Wait for Application's Kubernetes Namespace to Exist
  hosts: localhost
  # gather_facts: false
  tasks:
    - name: Check if the namespace exists
      # with_items: "{{ env }}"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{env.appname}}-dev"
      register: namespace_info
      until: namespace_info.resources
      retries: 60
      delay: 5
      tags:
        - wait_namespace

    - name: Debug Namespace Info
      debug:
        # msg: "{{namespace_info.resources}}" 
        var: namespace_info
      tags:
        - wait_namespace

- name: Create TriggerBinding
  hosts: localhost
  gather_facts: false
  tasks:
  - name: Create or Update TriggerBindings for your app
    k8s:
      definition:
        apiVersion: triggers.tekton.dev/v1beta1
        kind: TriggerBinding
        metadata:
          name: "{{ env.appname }}-binding"
          namespace: "{{env.appname}}-dev"
          annotations:
            generated_by: ansible_playbook
        spec:
          params:
          - name: maven_mirror_url
            value: 'http://{{nexus_svc_url}}:{{nexus_svc_port}}/repository/maven-public'
          - name: sonarqube_host_url
            value: "https://{{sonarqube_route_url}}"
          - name: tls_verify
            value: "true"
          # # TODO: This is required
          # - name: image_dev_repo
          #   value: "{{ quay_route_url}}/dev/{{env.appname}}"
          - name: cyclonedx_host_url
            value: "https://{{cyclonedx_route_url}}"

      state: present
    tags:
      - triggerbinding

- name: gpg configuration
  import_playbook: gpg.yaml
  vars:
    ci_namespace: "{{env.appname}}-dev"
  tags:
    - gpg

- name: sonarqube configuration
  import_playbook: sonarqube.yaml
  vars:
    sonarqube_route_url: "{{sonarqube_route_url}}"
    ci_namespace: "{{env.appname}}-dev"
  tags:
    - sonarqube

- name: quay configuration
  import_playbook: quay.yaml
  vars:
    quay_route_url: "{{quay_route_url}}"
    ci_namespace: "{{env.appname}}-dev"
  tags:
    - quay

- name: rhacs configuration
  import_playbook: rhacs.yaml
  vars:
    rox_central_endpoint: "{{rhacs_route_url}}:443"
    ci_namespace: "{{env.appname}}-dev"
    quay_route_url: "{{quay_route_url}}"
  tags:
    - rhacs


